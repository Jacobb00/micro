version: '3.8'

services:
  user-service:
    build: ./user-management
    ports:
      - "5002:3001"
    depends_on:
      - postgres
      - rabbitmq
      - redis
    environment:
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_service_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped

  product-service:
    build: ./product-service
    ports:
      - "5001:80"
    depends_on:
      - mongodb
      - rabbitmq
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=ProductsDb
      - MongoDbSettings__ProductsCollectionName=Products
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Redis__ConnectionString=redis:6379
    networks:
      - microservices-network
    restart: unless-stopped

  order-tracking-service:
    build: ./order-tracking-service
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - rabbitmq
      - redis
    environment:
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/order-tracking
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - product-service
      - api-gateway
      - order-tracking-service
    networks:
      - microservices-network
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    ports:
      - "4001:4000"
    depends_on:
      - user-service
      - product-service
      - cart-service
      - payment-service
      - order-tracking-service
      - redis
    environment:
      - PORT=4000
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped

  cart-service:
    build: ./cart-service
    ports:
      - "4003:4003"
    depends_on:
      - redis
    environment:
      - PORT=4003
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped

  payment-service:
    build: ./payment-service
    ports:
      - "4004:4004"
    depends_on:
      - rabbitmq
      - product-service
      - cart-service
      - mysql
      - redis
    environment:
      - PORT=4004
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - PRODUCT_SERVICE_URL=http://product-service:80/api/products
      - CART_SERVICE_URL=http://cart-service:4003
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=payment_user
      - MYSQL_PASSWORD=payment_password
      - MYSQL_DATABASE=payment_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped

  stock-updater:
    build:
      context: ./payment-service
      dockerfile: Dockerfile.stock-updater
    depends_on:
      - rabbitmq
      - product-service
      - cart-service
    environment:
      - JWT_SECRET=V58XuK9zPq4sDwjEbCfa7hJLgMrTn2YH
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - PRODUCT_SERVICE_URL=http://product-service:80/api/products
      - CART_SERVICE_URL=http://cart-service:4003
    networks:
      - microservices-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=payment_db
      - MYSQL_USER=payment_user
      - MYSQL_PASSWORD=payment_password
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - microservices-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protokolü için
      - "15672:15672" # Yönetim arayüzü için
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - microservices-network
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:
  mysql_data:
  prometheus_data:
  grafana_data:
  redis_data: